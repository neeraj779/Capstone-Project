// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Swar.API.Contexts;

#nullable disable

namespace Swar.API.Migrations
{
    [DbContext(typeof(SwarContext))]
    [Migration("20240729153442_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Swar.API.Models.DBModels.LikedSong", b =>
                {
                    b.Property<int>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeId"), 1L, 1);

                    b.Property<DateTime>("LikedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SongId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LikeId");

                    b.HasIndex("UserId", "SongId")
                        .IsUnique();

                    b.ToTable("LikedSongs");
                });

            modelBuilder.Entity("Swar.API.Models.DBModels.PlayHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryId"), 1L, 1);

                    b.Property<DateTime>("PlayedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SongId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("HistoryId");

                    b.HasIndex("UserId");

                    b.ToTable("PlayHistories");
                });

            modelBuilder.Entity("Swar.API.Models.DBModels.Playlist", b =>
                {
                    b.Property<int>("PlaylistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaylistId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("PlaylistName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PlaylistId");

                    b.HasIndex("UserId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Swar.API.Models.DBModels.PlaylistSong", b =>
                {
                    b.Property<int>("PlaylistId")
                        .HasColumnType("int");

                    b.Property<string>("SongId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PlaylistId", "SongId");

                    b.ToTable("PlaylistSongs");
                });

            modelBuilder.Entity("Swar.API.Models.DBModels.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHashKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("UserStatus")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 100,
                            Email = "admin@gmail.com",
                            Gender = "Male",
                            HashedPassword = new byte[] { 105, 206, 164, 53, 222, 226, 133, 230, 244, 70, 164, 31, 104, 161, 46, 242, 108, 10, 234, 51, 129, 76, 145, 233, 217, 157, 211, 80, 199, 191, 253, 166, 141, 123, 224, 50, 227, 253, 192, 207, 107, 108, 133, 207, 20, 150, 79, 108, 138, 47, 95, 20, 241, 214, 220, 59, 22, 154, 175, 178, 41, 102, 241, 240 },
                            Name = "admin",
                            PasswordHashKey = new byte[] { 254, 131, 17, 21, 216, 237, 51, 76, 205, 207, 186, 238, 14, 173, 45, 28, 6, 169, 14, 51, 199, 32, 227, 66, 84, 179, 22, 78, 71, 81, 155, 207, 158, 136, 149, 224, 255, 125, 68, 189, 166, 29, 200, 213, 26, 64, 241, 17, 185, 137, 92, 135, 154, 194, 249, 131, 214, 7, 212, 93, 190, 181, 85, 112, 184, 169, 47, 47, 33, 194, 105, 18, 132, 16, 93, 214, 112, 134, 154, 205, 139, 172, 153, 5, 6, 243, 239, 236, 96, 217, 135, 94, 205, 135, 131, 145, 31, 190, 221, 74, 9, 209, 255, 139, 95, 114, 178, 141, 234, 246, 3, 72, 52, 112, 119, 227, 21, 76, 159, 122, 35, 53, 110, 25, 162, 225, 201, 63 },
                            RegistrationDate = new DateTime(2024, 7, 29, 15, 34, 42, 215, DateTimeKind.Utc).AddTicks(6070),
                            Role = 0,
                            UserStatus = 0
                        });
                });

            modelBuilder.Entity("Swar.API.Models.DBModels.UserUploadedSong", b =>
                {
                    b.Property<int>("SongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SongId"), 1L, 1);

                    b.Property<string>("Album")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SongName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SongId");

                    b.HasIndex("UserId");

                    b.ToTable("UserUploadedSongs");
                });

            modelBuilder.Entity("Swar.API.Models.DBModels.LikedSong", b =>
                {
                    b.HasOne("Swar.API.Models.DBModels.User", "User")
                        .WithMany("LikedSongs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Swar.API.Models.DBModels.PlayHistory", b =>
                {
                    b.HasOne("Swar.API.Models.DBModels.User", "User")
                        .WithMany("PlayHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Swar.API.Models.DBModels.Playlist", b =>
                {
                    b.HasOne("Swar.API.Models.DBModels.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Swar.API.Models.DBModels.PlaylistSong", b =>
                {
                    b.HasOne("Swar.API.Models.DBModels.Playlist", "Playlist")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("Swar.API.Models.DBModels.UserUploadedSong", b =>
                {
                    b.HasOne("Swar.API.Models.DBModels.User", "User")
                        .WithMany("UploadedSongs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Swar.API.Models.DBModels.Playlist", b =>
                {
                    b.Navigation("PlaylistSongs");
                });

            modelBuilder.Entity("Swar.API.Models.DBModels.User", b =>
                {
                    b.Navigation("LikedSongs");

                    b.Navigation("PlayHistories");

                    b.Navigation("Playlists");

                    b.Navigation("UploadedSongs");
                });
#pragma warning restore 612, 618
        }
    }
}
